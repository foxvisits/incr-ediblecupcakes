---
import '../index.css';

export interface Props {
  title: string;
  description: string;
  image?: string;
  canonical?: string;
}

const { 
  title, 
  description, 
  image = "/A vibrant, mouth-watering cupcake scene.png",
  canonical = Astro.url.href
} = Astro.props;

const siteTitle = title.includes('Incr-EdibleCupCakes') ? title : `${title} - Incr-EdibleCupCakes`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>{siteTitle}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content="cupcake recipes, keto cupcakes, vegan cupcakes, gluten-free cupcakes, baking recipes, homemade cupcakes" />
    <meta name="author" content="Sarah - Incr-EdibleCupCakes" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Additional SEO Meta Tags -->
    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
    <meta name="googlebot" content="index, follow" />
    <meta name="bingbot" content="index, follow" />
    <meta name="language" content="English" />
    <meta name="revisit-after" content="7 days" />
    <meta name="rating" content="General" />
    <meta name="distribution" content="Global" />
    <meta name="geo.region" content="US" />
    <meta name="geo.country" content="United States" />
    
    <!-- Additional SEO Meta Tags -->
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="application-name" content="Incr-EdibleCupCakes" />
    <meta name="msapplication-TileColor" content="#FF69B4" />
    <meta name="theme-color" content="#FF69B4" />
    <meta name="color-scheme" content="light" />
    
    <!-- Security Headers -->
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    
    <!-- Favicons -->
    <link rel="icon" type="image/png" sizes="32x32" href="/icon-192.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/icon-192.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/icon-192.png" />
    <link rel="shortcut icon" href="/icon-192.png" />
    <link rel="icon" href="/icon-192.png" type="image/png" />
    
    <!-- PWA -->
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#FF69B4" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="Incr-EdibleCupCakes" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={siteTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.site)} />
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonical} />
    <meta name="twitter:title" content={siteTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(image, Astro.site)} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonical} />
    
    <!-- Critical CSS - Mobile-first optimized -->
    <style>
      /* Critical above-the-fold styles - mobile-first */
      * { box-sizing: border-box; }
      html { font-family: 'Nunito', -apple-system, BlinkMacSystemFont, sans-serif; }
      body { margin: 0; background: linear-gradient(135deg, #fdf2f8 0%, #fed7aa 100%); min-height: 100vh; line-height: 1.6; color: #374151; }
      
      /* Mobile-first responsive design */
      .header-container { background: linear-gradient(135deg, #ec4899 0%, #f97316 100%); position: relative; z-index: 50; }
      .hero-gradient { background: linear-gradient(135deg, #fdf2f8 0%, #fed7aa 100%); min-height: 60vh; }
      .btn-primary { background: linear-gradient(135deg, #ec4899 0%, #f97316 100%); color: white; padding: 0.75rem 1.5rem; border-radius: 0.75rem; font-weight: 600; text-decoration: none; display: inline-block; border: none; cursor: pointer; }
      .text-shadow-sm { text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); }
      img { max-width: 100%; height: auto; }
      
      /* Mobile optimizations */
      @media (max-width: 768px) {
        .hero-gradient { min-height: 50vh; }
        .btn-primary { padding: 0.625rem 1.25rem; font-size: 0.875rem; }
        body { font-size: 14px; }
      }
      
      /* Desktop enhancements */
      @media (min-width: 769px) {
        .hero-gradient { min-height: 80vh; }
        .btn-primary:hover { transform: translateY(-2px); transition: transform 0.2s ease; }
        .header-container { box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1); }
      }
    </style>

    <!-- Preconnects / Fonts - Optimized for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <!-- DNS prefetch for external resources -->
    <link rel="dns-prefetch" href="https://images.unsplash.com">
    <link rel="dns-prefetch" href="https://cdn.jsdelivr.net">
    
    <!-- Critical fonts inline to avoid render blocking -->
    <style>
      @font-face {
        font-family: 'Nunito';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url('https://fonts.gstatic.com/s/nunito/v26/XRXI3I6Li01BKofAjsOUYevI.woff2') format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
      @font-face {
        font-family: 'Nunito';
        font-style: normal;
        font-weight: 600;
        font-display: swap;
        src: url('https://fonts.gstatic.com/s/nunito/v26/XRXI3I6Li01BKofA6sOUYevI.woff2') format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
      @font-face {
        font-family: 'Nunito';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url('https://fonts.gstatic.com/s/nunito/v26/XRXI3I6Li01BKofAisOUYevI.woff2') format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    
    <!-- Non-critical fonts loaded asynchronously -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Quicksand:wght@300;500;800;900&display=swap" rel="stylesheet" media="print" onload="this.media='all'">
    
    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://images.pexels.com">
    
    <!-- Global Schema.org JSON-LD -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "Incr-EdibleCupCakes",
        "url": "https://incr-ediblecupcakes.com",
        "potentialAction": {
          "@type": "SearchAction",
          "target": {
            "@type": "EntryPoint",
            "urlTemplate": "https://incr-ediblecupcakes.com/recipes?search={search_term_string}"
          },
          "query-input": "required name=search_term_string"
        }
      }
    </script>
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "Organization",
        "name": "Incr-EdibleCupCakes",
        "url": "https://incr-ediblecupcakes.com",
        "logo": "https://incr-ediblecupcakes.com/Incr-EdibleCupCakes%20Logo.png",
        "description": "Professional bakery specializing in innovative cupcake recipes for all dietary preferences",
        "founder": {
          "@type": "Person",
          "name": "Sarah",
          "jobTitle": "Professional Baker",
          "image": "https://incr-ediblecupcakes.com/Sarah.png"
        },
        "address": {
          "@type": "PostalAddress",
          "addressCountry": "US",
          "addressLocality": "Portland, Oregon"
        },
        "sameAs": [
          "https://instagram.com/incrediblecupcakes",
          "https://facebook.com/incrediblecupcakes"
        ],
        "contactPoint": {
          "@type": "ContactPoint",
          "telephone": "+1-555-123-CAKE",
          "contactType": "customer service",
          "email": "sarah@incr-ediblecupcakes.com"
        }
      }
    </script>
  </head>
  <body>
    <div class="min-h-screen bg-gradient-to-br from-pink-50 to-orange-50 font-nunito">
      <a 
        href="#main-content" 
        class="sr-only focus:not-sr-only focus:fixed focus:top-4 focus:left-4 focus:z-50 focus:px-4 focus:py-2 focus:bg-rose-500 focus:text-white focus:rounded-md focus:outline-none focus:ring-2 focus:ring-rose-300"
        id="skip-link"
      >
        Skip to main content
      </a>
    <slot />
    </div>
    
    <!-- Mobile-optimized JavaScript -->
    <script>
      // Mobile-first performance optimizations
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      
      // Service Worker - only on mobile for better caching
      if ('serviceWorker' in navigator && isMobile) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/service-worker.js')
            .then(registration => console.log('SW registered'))
            .catch(error => console.log('SW registration failed'));
        });
      }
      
      // Lazy load non-critical resources
      document.addEventListener('DOMContentLoaded', () => {
        // Preload next page on hover (desktop only)
        if (!isMobile) {
          const links = document.querySelectorAll('a[href^="/"]');
          links.forEach(link => {
            link.addEventListener('mouseenter', () => {
              const href = link.getAttribute('href');
              if (href && !href.includes('#')) {
                const linkEl = document.createElement('link');
                linkEl.rel = 'prefetch';
                linkEl.href = href;
                document.head.appendChild(linkEl);
              }
            });
          });
        }
        
        // Mobile-specific optimizations
        if (isMobile) {
          // Reduce animation complexity on mobile
          document.body.classList.add('mobile-optimized');
          
          // Lazy load images below the fold
          const images = document.querySelectorAll('img[loading="lazy"]');
          if ('IntersectionObserver' in window) {
            const imageObserver = new IntersectionObserver((entries) => {
              entries.forEach(entry => {
                if (entry.isIntersecting) {
                  const img = entry.target;
                  img.src = img.dataset.src || img.src;
                  imageObserver.unobserve(img);
                }
              });
            }, { rootMargin: '50px' });
            
            images.forEach(img => imageObserver.observe(img));
          }
        }
      });
    </script>
  </body>
</html>